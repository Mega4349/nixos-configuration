# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, modulesPath, pkgs, ... }:

{
  imports = [(
    modulesPath + "/installer/scan/not-detected.nix"
  )];

  boot = {
    initrd = {
      luks.devices."main".device = "/dev/disk/by-uuid/d40a9beb-67de-4b74-bebc-52e57546da8d";
      availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
      kernelModules = [ "amdgpu" ];
    };
    kernelModules = [ "kvm-amd" ];
    extraModulePackages = [ config.boot.kernelPackages.v4l2loopback ]; # For virtual camera in OBS
    kernelParams = [ "radeon.si_support=0" "amdgpu.si_support=1" ];
    binfmt.registrations.appimage = {
      wrapInterpreterInShell = false;
      interpreter = "${pkgs.appimage-run}/bin/appimage-run";
      recognitionType = "magic";
      offset = 0;
      mask = ''\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff'';
      magicOrExtension = ''\x7fELF....AI\x02'';
    };
  };

  fileSystems."/" = {
      device = "none";
      fsType = "tmpfs";
      options = [ "defaults" "size=10G" "mode=755" ];
    };

  fileSystems."/home/mega" = { 
      device = "none";
      fsType = "tmpfs";
      options = [ "size=10G" "mode=777" ];
    };

  fileSystems."/boot" = { 
      device = "/dev/disk/by-uuid/52F0-7588";
      fsType = "vfat";
    };

  fileSystems."/nix" = { 
      device = "/dev/mapper/main";
      fsType = "btrfs";
      options = [ "subvol=nix" "compress=zstd-force" ];
      neededForBoot = true;
    };

  #boot.initrd.luks.devices."main".device = "/dev/disk/by-uuid/d40a9beb-67de-4b74-bebc-52e57546da8d";

  fileSystems."/nix/persist" = { 
      device = "/dev/mapper/main";
      fsType = "btrfs";
      options = [ "subvol=persist" "compress=zstd-foce" ];
      neededForBoot = true;
    };

  fileSystems."/nix/persist/home" = { 
      device = "/dev/mapper/main";
      fsType = "btrfs";
      options = [ "subvol=home" "compress=zstd-foce" ];
      neededForBoot = true;
    };

  fileSystems."/home/mega/.osu" = {
    device = "/dev/mapper/main";
    fsType = "btrfs";
    options = [ "subvol=osu" "compress=zstd-force" ];
  };

  fileSystems."/home/mega/Games" = {
    device = "/dev/mapper/main";
    fsType = "btrfs";
    options = [ "subvol=games" "compress=zstd-force" ];
  };

  fileSystems."/home/mega/.flake" = { 
      device = "/nix/persist/etc/nixos";
      fsType = "none";
      options = [ "bind" ];
    };

  fileSystems."/var/log" = { 
      device = "/nix/persist/var/log";
      fsType = "none";
      options = [ "bind" ];
    };

  environment.etc."machine-id".source = /nix/persist/etc/machine-id;

  fileSystems."/swap" = {
    device = "/dev/disk/by-uuid/99b332b1-5aaa-44b6-8459-d876bf97e941";
    fsType = "btrfs";
    options = [ "subvol=swap" ];
    };

  swapDevices = [ {
    device = "/swap/swapfile";
    priority = 10;
    size = 20*1024;
    } ];

  zramSwap = {
    enable = true;
    algorithm = "zstd";
    priority = 100;
    memoryPercent = 40;
  };

  services.btrfs.autoScrub = {
    enable = true;
    interval = "weekly";
    fileSystems = [
      "/nix"
      "/nix/persist"
      "/nix/persist/home"
    ];
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0f0u6u4.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0f0u8.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;
  services.fstrim.enable = lib.mkDefault true;
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
